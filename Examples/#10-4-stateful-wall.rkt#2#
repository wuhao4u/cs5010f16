#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 224 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 2150 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; 10-4-stateful-wall.rkt"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; Like 10-2, but the wall will be stateful"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; the world will be an object with exactly two widgets:"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; a ball and a wall.  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; In this version, the wall is draggable, but the ball is not."
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; The ball should bounce off the wall."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; The ball is told about the wall when it's created"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"extras.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; start with (run framerate).  Typically: (run 0.25)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; CONSTANTS"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"INIT-BALL-X"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"INIT-BALL-Y"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 12 #"CANVAS-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"INIT-BALL-SPEED"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"INITIAL-WALL-POSITION"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; INTERFACES"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; A World is an object of any class that implements World<%>"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"World<%>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"interface"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 15 #"; -> WorldState"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 21 #"; GIVEN: no arguments"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 50 #"; RETURNS: the state of the world at the next tick"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 10 #"after-tick"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 41 #"; Integer Integer MouseEvent-> WorldState"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 19 #"; GIVEN: a location"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 56 #"; RETURNS: the state of the world that should follow the"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 42 #"; given mouse event at the given location."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 17 #"after-mouse-event"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 35 #"; KeyEvent : KeyEvent -> WorldState"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #"; GIVEN: a key event"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 56 #"; RETURNS: the state of the world that should follow the"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 17 #"; given key event"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 15 #"after-key-event"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 10 #"; -> Scene"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 16 #"; GIVEN: a scene"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 42 #"; RETURNS: a scene that depicts this World"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 8 #"to-scene"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; A Widget is an object of any class that implements Widget<%>"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"Widget<%>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"interface"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 11 #"; -> Widget"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 21 #"; GIVEN: no arguments"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 67
#"; RETURNS: the state of this object that should follow at time t+1."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 10 #"after-tick"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 27 #"; Integer Integer -> Widget"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 19 #"; GIVEN: a location"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 58
#"; RETURNS: the state of this object that should follow the"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 46 #"; specified mouse event at the given location."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 17 #"after-button-down"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 15 #"after-button-up"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 10 #"after-drag"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #"; KeyEvent -> Widget"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 31 #"; GIVEN: a key event and a time"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 58
#"; RETURNS: the state of this object that should follow the"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 17 #"; given key event"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 15 #"after-key-event"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 16 #"; Scene -> Scene"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 16 #"; GIVEN: a scene"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 59
#"; RETURNS: a scene like the given one, but with this object"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 16 #"; painted on it."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 12 #"add-to-scene"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; An SWidget is an object of any class that implements the SWidget<"
 #"%>"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";; interface."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; A SWidget is like a Widget, but it is stable (stateful)."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"SWidget<%>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"interface"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 9 #"; -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 21 #"; GIVEN: no arguments"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 57 #"; EFFECT: updates this widget to the state it should have"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 19 #"; following a tick."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 10 #"after-tick"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 25 #"; Integer Integer -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 19 #"; GIVEN: a location"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 57 #"; EFFECT: updates this widget to the state it should have"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 60
#"; following the specified mouse event at the given location."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 17 #"after-button-down"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 15 #"after-button-up"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 10 #"after-drag"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 29 #"; KeyEvent : KeyEvent -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #"; GIVEN: a key event"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 57 #"; EFFECT: updates this widget to the state it should have"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 31 #"; following the given key event"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 15 #"after-key-event"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 16 #"; Scene -> Scene"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 16 #"; GIVEN: a scene"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 59
#"; RETURNS: a scene like the given one, but with this object"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 16 #"; painted on it."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 12 #"add-to-scene"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; In 10-4, the wall will be stable (stateful), so its interface"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; extends SWidget<%> instead of Widget<%>."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; An SWall is an object of any class that implements SWall<%>."
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; There will be only one such class."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; SWall<%> extends SWidget<%> instead of Widget<%>."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"SWall<%>"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"interface"
0 0 24 3 2 #" ("
0 0 14 3 10 #"SWidget<%>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 8 #"; -> Int"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #"; RETURNS: the x-position of the wall"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 7 #"get-pos"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; initial-world : -> World"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; RETURNS: a world with a stateful wall, and a ball that knows abou"
 #"t"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";; the wall."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-wall"
0 0 24 3 2 #" ("
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 6 #"SWall%"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-ball"
0 0 24 3 2 #" ("
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 5 #"Ball%"
0 0 24 3 2 #" ["
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-wall"
0 0 24 3 4 #"])))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"make-world-state"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-ball"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-wall"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; run : PosReal -> World"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; GIVEN: a frame rate, in secs/tick"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; EFFECT: runs an initial world at the given frame rate"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; RETURNS: the final state of the world"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 4 #"rate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"big-bang"
0 0 24 3 2 #" ("
0 0 14 3 13 #"initial-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"on-tick"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 10 #"after-tick"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"rate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"on-draw"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 8 #"to-scene"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"on-key"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 3 #"kev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 15 #"after-key-event"
0 0 24 3 1 #" "
0 0 14 3 3 #"kev"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"on-mouse"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #" "
0 0 14 3 3 #"mev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 17 #"after-mouse-event"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #" "
0 0 14 3 3 #"mev"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; The World% class."
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; Like World% in 10-2, but supports SWidgets as well as Widgets."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; ListOfWidget ListOfSWidget -> World"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"make-world-state"
0 0 24 3 1 #" "
0 0 14 3 4 #"objs"
0 0 24 3 1 #" "
0 0 14 3 5 #"sobjs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 6 #"World%"
0 0 24 3 2 #" ["
0 0 14 3 4 #"objs"
0 0 24 3 1 #" "
0 0 14 3 4 #"objs"
0 0 24 3 2 #"]["
0 0 14 3 5 #"sobjs"
0 0 24 3 1 #" "
0 0 14 3 5 #"sobjs"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"World%"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"class*"
0 0 24 3 1 #" "
0 0 14 3 7 #"object%"
0 0 24 3 2 #" ("
0 0 14 3 8 #"World<%>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"init-field"
0 0 24 3 1 #" "
0 0 14 3 4 #"objs"
0 0 24 3 4 #")   "
0 0 17 3 14 #"; ListOfWidget"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"init-field"
0 0 24 3 1 #" "
0 0 14 3 5 #"sobjs"
0 0 24 3 3 #")  "
0 0 17 3 15 #"; ListOfSWidget"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"super-new"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 71
(
 #";; process-widgets : ((Widget -> Widget) && (SWidget -> Void)) -> Wo"
 #"rld"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 64
#";; An abstraction to pass messages to both Widgets and SWidgets."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 64
#";; apply the fn to both the objs and the sobjs, and return a new"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 61
#";; World% with new values of the objs, and with sobjs updated"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 17 #";; appropriately."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 62
#";; This has a contract that is not directly expressible in our"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 65
#";; usual language of contracts.  The notation we've written means"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #";; that fn must satisfy the contracts"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 44 #";; (Widget -> Widget) AND (SWidget -> Void)."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"process-widgets"
0 0 24 3 1 #" "
0 0 14 3 2 #"fn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 6 #"World%"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"objs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 2 #"fn"
0 0 24 3 1 #" "
0 0 14 3 4 #"objs"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 5 #"sobjs"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"for-each"
0 0 24 3 1 #" "
0 0 14 3 2 #"fn"
0 0 24 3 1 #" "
0 0 14 3 5 #"sobjs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 5 #"sobjs"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 23 #";; after-tick : -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 60
#";; Use map on the Widgets in this World; use for-each on the"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 19 #";; stateful widgets"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 10 #"after-tick"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 6 #"World%"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"objs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"obj"
0 0 24 3 3 #") ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 3 #"obj"
0 0 24 3 1 #" "
0 0 14 3 10 #"after-tick"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 4 #"objs"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 5 #"sobjs"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"for-each"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"obj"
0 0 24 3 3 #") ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 3 #"obj"
0 0 24 3 1 #" "
0 0 14 3 10 #"after-tick"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 5 #"sobjs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 5 #"sobjs"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 10 #"after-tick"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"process-widgets"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"obj"
0 0 24 3 3 #") ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 3 #"obj"
0 0 24 3 1 #" "
0 0 14 3 10 #"after-tick"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #";; to-scene : -> Scene"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 59
#";; Use HOFC foldr on the Widgets and SWidgets in this World"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 47 #";; Note: the append is inefficient, but clear.."
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 8 #"to-scene"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"foldr"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"obj"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 3 #"obj"
0 0 24 3 1 #" "
0 0 14 3 12 #"add-to-scene"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 12 #"EMPTY-CANVAS"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"sobjs"
0 0 24 3 1 #" "
0 0 14 3 4 #"objs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 38 #";; after-key-event : KeyEvent -> World"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 63
#";; STRATEGY: Pass the KeyEvents on to the objects in the world."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 15 #"after-key-event"
0 0 24 3 1 #" "
0 0 14 3 3 #"kev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"process-widgets"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"obj"
0 0 24 3 3 #") ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 3 #"obj"
0 0 24 3 1 #" "
0 0 14 3 15 #"after-key-event"
0 0 24 3 1 #" "
0 0 14 3 3 #"kev"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 56 #";; world-after-mouse-event : Nat Nat MouseEvent -> World"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 24 #";; STRATGY: Cases on mev"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 17 #"after-mouse-event"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #" "
0 0 14 3 3 #"mev"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"mouse=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"mev"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 23 #"world-after-button-down"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"mouse=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"mev"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"drag\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 16 #"world-after-drag"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"mouse=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"mev"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"button-up\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 21 #"world-after-button-up"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 4 #"this"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 68
#";; the next few functions are local functions, not in the interface."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"world-after-button-down"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"process-widgets"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"obj"
0 0 24 3 3 #") ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 3 #"obj"
0 0 24 3 1 #" "
0 0 14 3 17 #"after-button-down"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"world-after-button-up"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"process-widgets"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"obj"
0 0 24 3 3 #") ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 3 #"obj"
0 0 24 3 1 #" "
0 0 14 3 15 #"after-button-up"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"world-after-drag"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"process-widgets"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"obj"
0 0 24 3 3 #") ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 3 #"obj"
0 0 24 3 1 #" "
0 0 14 3 10 #"after-drag"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; The Ball% class"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";; (same as 10-2-1)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; A Ball is a (new Ball% [x Int][y Int][speed Int][w Wall])"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; w is required; all others have default values."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"Ball%"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"class*"
0 0 24 3 1 #" "
0 0 14 3 7 #"object%"
0 0 24 3 2 #" ("
0 0 14 3 9 #"Widget<%>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"init-field"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")  "
0 0 17 3 46 #";; the Wall that the ball should bounce off of"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 42 #";; initial values of x, y (center of ball)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"init-field"
0 0 24 3 2 #" ["
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 11 #"INIT-BALL-X"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"init-field"
0 0 24 3 2 #" ["
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 11 #"INIT-BALL-Y"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"init-field"
0 0 24 3 2 #" ["
0 0 14 3 5 #"speed"
0 0 24 3 1 #" "
0 0 14 3 15 #"INIT-BALL-SPEED"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #"; is this selected? Default is false."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"init-field"
0 0 24 3 2 #" ["
0 0 14 3 9 #"selected?"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #"]) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 39 #";; if this is selected, the position of"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 58
#";; the last button-down event inside this, relative to the"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 34 #";; ball's center.  Else any value."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"init-field"
0 0 24 3 2 #" ["
0 0 14 3 8 #"saved-mx"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #"] ["
0 0 14 3 8 #"saved-my"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"field"
0 0 24 3 2 #" ["
0 0 14 3 6 #"radius"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"super-new"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 23 #";; after-tick : -> Ball"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 66
#";; state of this ball after a tick.  A selected ball doesn't move."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 10 #"after-tick"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 24 3 1 #" "
0 0 14 3 4 #"this"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 5 #"Ball%"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-x-pos"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 5 #"speed"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-speed"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 9 #"selected?"
0 0 24 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 8 #"saved-mx"
0 0 24 3 1 #" "
0 0 14 3 8 #"saved-mx"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 8 #"saved-my"
0 0 24 3 1 #" "
0 0 14 3 8 #"saved-my"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 13 #";; -> Integer"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 40 #";; position of the ball at the next tick"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 58
#";; STRATEGY: ask the wall for its position and use that to"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 54 #";; calculate the upper bound for the ball's x position"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-x-pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"limit-value"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 6 #"radius"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"speed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 7 #"get-pos"
0 0 24 3 2 #") "
0 0 14 3 6 #"radius"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 21 #";; Number^3 -> Number"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 18 #";; WHERE: lo <= hi"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 49 #";; RETURNS: val, but limited to the range [lo,hi]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 12 #";; EXAMPLES:"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 31 #";;  (limit-value 10 20 30) = 20"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 31 #";;  (limit-value 10  5 30) = 10"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 32 #";;  (limit-value 10 100 30) = 30"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"limit-value"
0 0 24 3 1 #" "
0 0 14 3 2 #"lo"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 2 #"hi"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"max"
0 0 24 3 1 #" "
0 0 14 3 2 #"lo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 2 #"hi"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 13 #";; -> Integer"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 53 #";; RETURNS: the velocity of the ball at the next tick"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 57 #";; STRATEGY: if the ball will be at its limit, negate the"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 42 #";; velocity, otherwise return it unchanged"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-speed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-x-pos"
0 0 24 3 2 #") "
0 0 14 3 6 #"radius"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-x-pos"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"send"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 7 #"get-pos"
0 0 24 3 2 #") "
0 0 14 3 6 #"radius"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"speed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"speed"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-to-scene"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"place-image"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 6 #"radius"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 9 #"\"outline\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 45 #"; after-button-down : Integer Integer -> Ball"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 44 #"; GIVEN: the location of a button-down event"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 49 #"; STRATEGY: Cases on whether the event is in this"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 17 #"after-button-down"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"in-this?"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 5 #"Ball%"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"]["
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"]["
0 0 14 3 5 #"speed"
0 0 24 3 1 #" "
0 0 14 3 5 #"speed"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 9 #"selected?"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 8 #"saved-mx"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 8 #"saved-my"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"this"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 40 #";; in-this? : Integer Integer -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 34 #";; GIVEN: a location on the canvas"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 49 #";; RETURNS: true iff the location is inside this."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"in-this?"
0 0 24 3 1 #" "
0 0 14 3 7 #"other-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"other-y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sqr"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 7 #"other-x"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"sqr"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 7 #"other-y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"sqr"
0 0 24 3 1 #" "
0 0 14 3 6 #"radius"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 43 #"; after-button-up : Integer Integer -> Ball"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 42 #"; GIVEN: the location of a button-up event"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 49 #"; STRATEGY: Cases on whether the event is in this"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 40 #"; If this is selected, then unselect it."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 15 #"after-button-up"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"in-this?"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 5 #"Ball%"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"]["
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"]["
0 0 14 3 5 #"speed"
0 0 24 3 1 #" "
0 0 14 3 5 #"speed"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 9 #"selected?"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 8 #"saved-mx"
0 0 24 3 1 #" "
0 0 21 3 3 #"127"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 8 #"saved-my"
0 0 24 3 1 #" "
0 0 21 3 2 #"98"
0 0 24 3 4 #"]   "
0 0 17 3 41 #"; the invariant says that if selected? is"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 17 3 35 #"; false, you can put anything here."
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"this"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 38 #"; after-drag : Integer Integer -> Ball"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #"; GIVEN: the location of a drag event"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 50 #"; STRATEGY: Cases on whether the ball is selected."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 66
#"; If it is selected, move it so that the vector from the center to"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #"; the drag event is equal to (mx, my)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 10 #"after-drag"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 5 #"Ball%"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 8 #"saved-mx"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #" "
0 0 14 3 8 #"saved-my"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 5 #"speed"
0 0 24 3 1 #" "
0 0 14 3 5 #"speed"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 9 #"selected?"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 8 #"saved-mx"
0 0 24 3 1 #" "
0 0 14 3 8 #"saved-mx"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 8 #"saved-my"
0 0 24 3 1 #" "
0 0 14 3 8 #"saved-my"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 4 #"this"
0 0 24 3 5 #"))   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 30 #";; the ball ignores key events"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 15 #"after-key-event"
0 0 24 3 1 #" "
0 0 14 3 3 #"kev"
0 0 24 3 2 #") "
0 0 14 3 4 #"this"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;; The SWall% class. Implements SWall<%>, not Wall<%>."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; Constructor Template for SWall%"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; (new SWall% [pos Integer]"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;             [saved-mx Integer]"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;             [selected? Boolean])"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; all these fields have default values"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"SWall%"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"class*"
0 0 24 3 1 #" "
0 0 14 3 7 #"object%"
0 0 24 3 2 #" ("
0 0 14 3 8 #"SWall<%>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"init-field"
0 0 24 3 2 #" ["
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 21 #"INITIAL-WALL-POSITION"
0 0 24 3 3 #"]) "
0 0 17 3 28 #"; the x position of the wall"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 41 #"; is the wall selected? Default is false."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"init-field"
0 0 24 3 2 #" ["
0 0 14 3 9 #"selected?"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #"]) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 45 #";; if the wall is selected, the x position of"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 43 #";; the last button-down event near the wall"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 32 #";; relative to the wall position"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"init-field"
0 0 24 3 2 #" ["
0 0 14 3 8 #"saved-mx"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"super-new"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 33 #";; the extra behavior for Wall<%>"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 2 #") "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 45 #"; after-button-down : Integer Integer -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 51 #"; GIVEN: the (x, y) location of a button-down event"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 64
#"; EFFECT: if the event is near the wall, make the wall selected."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 55 #"; STRATEGY: Cases on whether the event is near the wall"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 17 #"after-button-down"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 10 #"near-wall?"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 13 #";; (new Wall%"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 14 #";;   [pos pos]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 21 #";;   [selected? true]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 27 #";;   [saved-mx (- mx pos)])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"saved-mx"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 7 #";; this"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"42"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 43 #"; after-button-up : Integer Integer -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 48 #"; GIVEN: the (x,y) location of a button-up event"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 35 #"; EFFECT: makes the Wall unselected"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 15 #"after-button-up"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 13 #";; (new Wall%"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 14 #";;   [pos pos]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 22 #";;   [selected? false]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 25 #";;   [saved-mx saved-mx])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 38 #"; after-drag : Integer Integer -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #"; GIVEN: the location of a drag event"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 50 #"; STRATEGY: Cases on whether the wall is selected."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 68
#"; If it is selected, move it so that the vector from its position to"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #"; the drag event is equal to saved-mx"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 10 #"after-drag"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 2 #"my"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 9 #"selected?"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 13 #";; (new Wall%"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 26 #";;   [pos (- mx saved-mx)]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 21 #";;   [selected? true]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 25 #";;   [saved-mx saved-mx])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 8 #"saved-mx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"38"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 32 #";; add-to-scene : Scene -> Scene"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 66
#";; RETURNS: a scene like the given one, but with this wall painted"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 9 #";; on it."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 12 #"add-to-scene"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"scene+line"
0 0 24 3 1 #" "
0 0 14 3 5 #"scene"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 13 #"CANVAS-HEIGHT"
0 0 24 3 2 #"  "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 60
#";; is mx near the wall?  We arbitrarily say it's near if its"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 19 #";; within 5 pixels."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"near-wall?"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"mx"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 3 #")) "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 34 #";; the wall has no other behaviors"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 10 #"after-tick"
0 0 24 3 2 #") "
0 0 14 3 4 #"this"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 15 #"after-key-event"
0 0 24 3 1 #" "
0 0 14 3 3 #"kev"
0 0 24 3 2 #") "
0 0 14 3 4 #"this"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"for-each"
0           0
